
defmac GetTerrainHeight height x y
    mac Noise height 2 0.125 x y
    mac Noise h 4 0.25 x y
    op add height height h
    mac Noise h 8 0.5 x y
    op add height height h
    mac Noise h 16 2 x y
    op add height height h
    mac Noise h 32 4 x y
    op add height height h
    mac Noise h 64 8 x y
    op add height height h
    mac Noise h 128 16 x y
    op add height height h
    op min height height 0
end

defmac Noise out freq amp x y
    op div lx x freq
    op div ly y freq
    op noise out lx ly
    op mul out out amp
end

# Gets the texture for a tile at a given position and height
defmac GetTile tile x y height
    
end

defmac RenderTile x y size
    set maxDepth -1
    set depthSum 0
    set heightSum 0
    set i 0
    Loop:
        op add ti i 1
        op idiv lx ti 2
        op mod lx lx 2
        op idiv ly i 2
        op mul lx lx size
        op mul ly ly size
        op add lx lx x
        op add ly ly y
        mac GetTerrainHeight lz lx ly
        op add heightSum heightSum lz
        op sub lx lx $PLAYER_X
        op sub ly ly $PLAYER_Y
        op sub lz lz $PLAYER_Z
        mac ApplyRotMatrixOrigin lx ly lz rotX rotY rotZ
        op max maxDepth maxDepth rotZ
        op mul nsize size -1
        jump NoDraw lessThan rotZ nsize
        op max rotZ rotZ 0.01
        mac ProjectPoint drawX drawY rotX rotY rotZ
        mac ToScreenCoords drawX drawY drawX drawY
        op add depthSum depthSum rotZ
        setmarker posi $markerID i drawX drawY
    op add i i 1
    jump Loop lessThan i 4
    jump NoDraw lessThan maxDepth 0
    op div avgDepth depthSum 40
    op sub drawLayer 200 avgDepth
    setmarker drawLayer $markerID drawLayer
    setmarker world $markerID true
    op div avgHeight heightSum 4
    op noise variant x y
    op add variant variant 1
    op mul variant variant 1000000
    op floor variant variant
    jump Water equal avgHeight 0
    jump Sand greaterThan avgHeight -1
    jump Grass greaterThan avgHeight -10
    Snow:
        op mod variant variant 3
        op add variant variant 1
        print "snow"
        print variant
    jump End always
    Grass:
        op mod variant variant 3
        op add variant variant 1
        print "grass"
        print variant
    jump End always
    Sand:
        op mod variant variant 3
        op add variant variant 1
        print "sand-floor"
        print variant
    jump End always
    Water:
        print "deep-water"
    End:
    setmarker texture $markerID true
    setmarker uvi $markerID 0 0 0
    setmarker uvi $markerID 1 0 1
    setmarker uvi $markerID 2 1 1
    setmarker uvi $markerID 3 1 0
    op add $markerID $markerID 1
    NoDraw:
end

defmac RenderTerrain
    proc
        setrate 600000
        wait 1
        Loop:
            wait 1e-4
            call SetFOV $FOV
            read $markerID $COMM_CELL $COMM_MARKER_ID
            read $PLAYER_X $COMM_CELL $COMM_PLAYER_X
            read $PLAYER_Y $COMM_CELL $COMM_PLAYER_Y
            read $PLAYER_Z $COMM_CELL $COMM_PLAYER_Z
            set $stackPointer 0

            call ReadRotMatrix
            call ReadScreenValues
            op floor offsetX $PLAYER_X
            op sub offsetX offsetX $RENDER_DISTANCE
            op floor offsetY $PLAYER_Y
            op sub offsetY offsetY $RENDER_DISTANCE
            RenderLoop:
                jump Exit equal $stackPointer -1
                call ReadStack tileX tileY tileSize
                #jump NoCheckTile lessThanEq tileSize 16
                #    call CheckTile result tileX tileY tileSize failed
                #    op add $stackPointer $stackPointer failed
                #    jump Exit equal failed true
                #    jump RenderLoopEnd equal result false
                #NoCheckTile:
                op div halfTileSize tileSize 2
                op add tileX2 tileX halfTileSize
                op add tileY2 tileY halfTileSize
                op sub distX $PLAYER_X tileX2
                op sub distY $PLAYER_Y tileY2
                op len dist distX distY
                op div dist dist 5
                op max dist dist $MINIMUM_TILE_SIZE
                jump Draw lessThanEq tileSize dist
                    call WriteStack tileX tileY halfTileSize
                    call WriteStack tileX2 tileY halfTileSize
                    call WriteStack tileX tileY2 halfTileSize
                    call WriteStack tileX2 tileY2 halfTileSize
                jump RenderLoopEnd always
                Draw:
                    call RenderTile tileX tileY tileSize
            RenderLoopEnd:
            jump RenderLoop always
            Exit:
            write $markerID $COMM_CELL $COMM_MARKER_ID
            print $markerID
            message mission
        jump Loop always
    end
end
